// This file is generated. Do not edit this file.

package main

import (
	"regexp"
	"runtime"
	"strconv"

	"dbt-rules/RULES/core"
)

// Import dependencies
{{- range $index, $element := .Packages }}
import p{{$index}} "{{$element}}"
{{- end}}

func init() {
	requiredMajor := uint64({{ .RequiredGoVersionMajor }})
	requiredMinor := uint64({{ .RequiredGoVersionMinor }})

	re := regexp.MustCompile("^go([[:digit:]]+)\\.([[:digit:]]+)(\\.[[:digit:]]+)?$")
	matches := re.FindStringSubmatch(runtime.Version())
	if matches == nil {
		core.Fatal("Failed to determine go version")
	}
	currentMajor, _ := strconv.ParseUint(matches[1], 10, 64)
	currentMinor, _ := strconv.ParseUint(matches[2], 10, 64)

	if currentMajor < requiredMajor || (currentMajor == requiredMajor && currentMinor < requiredMinor) {
		core.Fatal("DBT requires go version >= %d.%d. Found %d.%d", requiredMajor, requiredMinor, currentMajor, currentMinor)
	}
}

func main() {
	vars := map[string]interface{}{}

	// Evaluate dependencies
	{{- range $index, $_ := .Packages}}
	p{{$index}}.DbtMain(vars)
	{{- end}}

	core.GeneratorMain(vars)
}
